@using TicketSystemWeb.Models.KanbanBoard
@using System.Text.Json
@model TicketSystemWeb.Models.KanbanBoard.KanbanBoard

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kanban Board</title>
    <link rel="stylesheet" href="~/css/kanban.css">
    <link rel="stylesheet" href="~/css/ticketModal.css">
</head>
<body>
    <div class="kanban-container">
        <div class="project-list">
            @foreach (var project in ViewBag.UserProjects)
            {
                <div class="project-card @(Model.ProjectId == project.Id ? "active" : "")"
                     onclick="loadProject(@project.Id)">
                    <h4>@project.Title</h4>
                    <p>@(project.Description.Length > 20 ? project.Description.Substring(0, 20) + "..." : project.Description)</p>
                </div>
            }
        </div>

        <div class="kanban-content">
            @if (Model == null || Model.Columns.Count == 0)
            {
                <h2 class="no-projects-message">No Available Projects</h2>
            }
            else
            {
                <h1 class="kanban-title">@Model.ProjectName - Kanban Board</h1>
                <div class="button-group">
                    @if (ViewBag.CanMoveTickets != null && ViewBag.CanMoveTickets)
                    {
                        <button class="btn-add-column" onclick="openTicketModal()">Add Ticket</button>
                    }
                    @if (ViewBag.CanManageColumns != null && ViewBag.CanManageColumns)
                    {
                        <button class="btn-add-column" onclick="openColumnModal()">Manage Columns</button>
                    }
                </div>
                <div class="kanban-board-wrapper">
                    <div class="kanban-board">
                        @foreach (var column in Model.Columns.OrderBy(c => c.Order))
                        {
                            <div class="kanban-column" data-column-id="@column.Id"
                                 ondrop="@(ViewBag.CanManageColumns ? "dropColumn(event)" : "")"
                                 ondragover="@(ViewBag.CanManageColumns ? "allowDrop(event)" : "")">
                                <div class="column-header"
                                     draggable="@(ViewBag.CanManageColumns ? "true" : "false")"
                                     ondragstart="@(ViewBag.CanManageColumns ? "dragColumn(event)" : "")">
                                    <h3>@column.Name</h3>
                                </div>
                                <div class="kanban-cards"
                                     ondrop="@(ViewBag.CanMoveTickets ? "drop(event)" : "")"
                                     ondragover="@(ViewBag.CanMoveTickets ? "allowDrop(event)" : "")">
                                    @if (!Model.Project?.Tickets?.Any(t => t.Status == column.Name) ?? true)
                                    {
                                        <div class="drop-placeholder"></div>
                                    }
                                    @{
                                        var isAdmin = User.IsInRole("admin");
                                        var isManager = Model.Project?.ProjectManagerId == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                                        var isPrivileged = isAdmin || isManager;
                                        var canEditColumn = ViewBag.AccessibleColumnIds.Contains(column.Id);
                                    }
                                    @foreach (var ticket in Model.Project?.Tickets?.Where(t => t.Status == column.Name) ?? Enumerable.Empty<Ticket>())
                                    {
                                        var isAccessible = ViewBag.AccessibleColumnIds.Contains(column.Id);
                                        <div class="kanban-card"
                                             draggable="@(ViewBag.CanMoveTickets ? "true" : "false")"
                                             ondragstart="@(ViewBag.CanMoveTickets ? "drag(event)" : "")"
                                             id="ticket-@ticket.TicketId"
                                             data-column-id="@column.Id"
                                             data-editable="@isAccessible.ToString().ToLower()">
                                            <div class="card-header">
                                                <strong>@ticket.Title</strong>
                                            </div>
                                            <div class="card-body">
                                                <p>@ticket.Description</p>
                                            </div>
                                            <div class="card-footer">
                                                <span class="status">@ticket.Status</span>
                                                <span class="date">@ticket.CreatedAt.ToShortDateString()</span>
                                            </div>
                                            <div class="card-actions"
                                                 style="display: flex; justify-content: center; gap: 8px; align-items: center; width: 100%;">
                                                <button class="button-ticket button-ticket-details"
                                                        onclick="viewTicketDetails(@ticket.TicketId)">
                                                    🔍
                                                </button>

                                                @if (isPrivileged || canEditColumn)
                                                {
                                                    <button class="button-ticket button-ticket-edit"
                                                            onclick="editTicket(@ticket.TicketId)">
                                                        ✏️
                                                    </button>
                                                    <button class="button-ticket button-ticket-delete"
                                                            onclick="deleteTicket(@ticket.TicketId)">
                                                        ❌
                                                    </button>
                                                }
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>

    <div id="columnModal" class="modal">
        <div class="manage-modal-content">
            <span class="close" onclick="closeColumnModal()">&times;</span>
            <h2>Manage Columns</h2>
            <div class="column-actions">
                <div class="column-action">
                    <h3>Add Column</h3>
                    <input type="text" id="newColumnName" placeholder="Enter new column name">
                </div>
                <div class="column-action">
                    <h3>Edit Column</h3>
                    <select id="editColumnSelect">
                        <option value="">-- Select a Column --</option>
                        @foreach (var column in Model.Columns)
                        {
                            <option value="@column.Id">@column.Name</option>
                        }
                    </select>
                    <input type="text" id="editColumnName" placeholder="Enter new column name">
                    <h3>Column Group Access</h3>
                    <label>Current Group:</label>
                    <div id="currentColumnGroup">—</div>

                    <label for="columnGroupSelect">Change Group:</label>
                    <select id="columnGroupSelect">
                        <option value="">-- Select Group --</option>
                        @using TicketSystemWeb.Models.ProjectManagement.Group
                        @foreach (var group in ViewBag.ProjectGroups as List<Group>)
                        {
                            <option value="@group.Id">@group.Name</option>
                        }
                    </select>
                </div>
                <div class="column-action">
                    <h3>Delete Column</h3>
                    <select id="deleteColumnSelect">
                        <option value="">-- Select a Column --</option>
                        @foreach (var column in Model.Columns)
                        {
                            <option value="@column.Id">@column.Name</option>
                        }
                    </select>
                </div>
            </div>
            <div class="modal-buttons">
                <button class="btn-purple" onclick="addColumn()">Add</button>
                <button class="btn-purple" onclick="saveColumnChanges()">Save</button>
                <button class="btn-red" onclick="deleteColumn()">Delete</button>
            </div>
        </div>
    </div>
    <div id="ticketModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeTicketModal()">&times;</span>
            <h2>Add New Ticket</h2>
            <div id="addTicketError" class="error-message" style="color: red; display: none;"></div>
            <input type="hidden" id="projectId" value="@Model.ProjectId" />
            <div class="input-group">
                <label for="ticketTitle">Title:</label>
                <input type="text" id="ticketTitle" placeholder="Enter ticket title">
            </div>
            <div class="input-group">
                <label for="ticketDescription">Description:</label>
                <textarea id="ticketDescription" placeholder="Enter ticket description"></textarea>
            </div>
            <button class="btn-purple" onclick="submitTicket()">Add Ticket</button>
        </div>
    </div>
    <div id="viewTicketModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeViewTicketModal()">&times;</span>
            <h2>Ticket Details</h2>
            <div class="input-group">
                <label><strong style="margin-right: 6px;">Title:</strong></label>
                <div id="ticketViewTitle"></div>
            </div>
            <div class="input-group">
                <div id="ticketViewDescription" style="white-space: pre-wrap; word-break: break-word; max-height: 200px; overflow-y: auto; border: 1px solid #ccc; padding: 8px;"></div>
                <div id="ticketViewDescription"></div>
            </div>
            <div class="input-group">
                <label><strong style="margin-right: 6px;">Status:</strong></label>
                <div id="ticketViewStatus"></div>
            </div>
            <div class="input-group">
                <label><strong style="margin-right: 6px;">Created At:</strong></label>
                <div id="ticketViewCreatedAt"></div>
            </div>
            <div class="input-group">
                <label><strong style="margin-right: 6px;">Assigned To:</strong></label>
                <div id="ticketViewAssignedTo">—</div>
            </div>
            <div class="input-group">
                <label><strong style="margin-right: 6px;">Comments:</strong></label>
                <div id="ticketComments" style="white-space: pre-line; border: 1px solid #ccc; padding: 8px; max-height: 150px; overflow-y: auto;"></div>
            </div>
            <div class="input-group">
                <label><strong>History:</strong></label>
                <ul id="ticketViewHistory" style="max-height: 200px; overflow-y: auto; padding-left: 1em;"></ul>
            </div>
            <div class="input-group">
                <textarea id="newComment" placeholder="Add a comment..."></textarea>
                <button class="btn btn-purple" onclick="submitComment()">Post Comment</button>
            </div>
            <button class="btn btn-warning" onclick="closeViewTicketModal()">Close</button>
        </div>
    </div>
    <div id="editTicketModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeEditTicketModal()">&times;</span>
            <h2>Edit Ticket</h2>
            <div id="editTicketError" class="error-message" style="color: red; display: none;"></div>
            <input type="hidden" id="editTicketId">
            <div class="input-group">
                <label for="editTicketTitle">Title:</label>
                <input type="text" id="editTicketTitle">
            </div>
            <div class="input-group">
                <label for="editTicketDescription">Description:</label>
                <textarea id="editTicketDescription"></textarea>
            </div>
            <div class="input-group">
                <label for="editAssignedTo">Assigned To:</label>
                <select id="editAssignedTo">
                    <option value="">Unassigned</option>
                    <!-- options will be populated dynamically -->
                </select>
            </div>
            <button class="btn-purple" onclick="submitEditTicket()">Save Changes</button>
        </div>
    </div>
    <div id="deleteTicketModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeDeleteTicketModal()">&times;</span>
            <h2>Delete Ticket</h2>
            <div id="deleteTicketError" class="error-message" style="color: red; display: none;"></div>
            <p>Are you sure you want to delete this ticket?</p>
            <input type="hidden" id="deleteTicketId">
            <button class="btn-red" onclick="confirmDeleteTicket()">Delete</button>
            <button class="btn-purple" onclick="closeDeleteTicketModal()">Cancel</button>
        </div>
    </div>

    <script>
        const accessibleColumnIds = @Html.Raw(JsonSerializer.Serialize(ViewBag.AccessibleColumnIds));
        function openColumnModal() {
            document.getElementById("columnModal").style.display = "flex";
        }
        function closeColumnModal() {
            document.getElementById("columnModal").style.display = "none";
        }
        async function addColumn() {
            let columnName = document.getElementById("newColumnName").value.trim();
            if (!columnName) {
                alert("Please enter a column name.");
                return;
            }
            let response = await fetch(`/Home/AddColumn?projectId=@Model.ProjectId&name=${columnName}`, { method: "POST" });
            if (response.ok) {
                location.reload();
            } else {
                alert("Failed to add column.");
            }
        }
        async function saveColumnChanges() {
            let columnId = document.getElementById("editColumnSelect").value;
            let columnName = document.getElementById("editColumnName").value.trim();
            let groupId = document.getElementById("columnGroupSelect").value;
            if (!columnId) {
                alert("Please select a column to edit.");
                return;
            }
            let hasChanges = false;
            let renameSuccess = true;
            if (columnName) {
                const renameRes = await fetch(`/Home/RenameColumn?columnId=${columnId}&newName=${columnName}`, { method: "POST" });
                if (!renameRes.ok) {
                    alert("Failed to rename column.");
                    renameSuccess = false;
                } else {
                    hasChanges = true;
                }
            }
            if (groupId) {
                const groupRes = await fetch(`/Home/UpdateColumnGroupAccess?columnId=${columnId}&groupId=${groupId}`, { method: "POST" });
                if (groupRes.ok) {
                    hasChanges = true;
                } else {
                    alert("Failed to update group access.");
                }
            }
            if (!hasChanges) {
                alert("Please change the column name or select a group to update.");
                return;
            }
            if (renameSuccess) {
                location.reload();
            }
        }
        document.getElementById("editColumnSelect").addEventListener("change", async function () {
            const columnId = this.value;
            if (!columnId) return;
            const res = await fetch(`/Home/GetColumnGroup?columnId=${columnId}`);
            const data = await res.json();
            if (data.success) {
                document.getElementById("currentColumnGroup").innerText = data.groupName || "—";
                document.getElementById("columnGroupSelect").value = data.groupId || "";
            } else {
                document.getElementById("currentColumnGroup").innerText = "—";
                document.getElementById("columnGroupSelect").value = "";
            }
        });
        async function deleteColumn() {
            let columnId = document.getElementById("deleteColumnSelect").value;
            if (!columnId) {
                alert("Please select a column to delete.");
                return;
            }
            let confirmDelete = confirm("Are you sure you want to delete this column? Tickets in this column will be moved to the first column.");
            if (!confirmDelete) return;
            let response = await fetch(`/Home/DeleteColumn?columnId=${columnId}`, { method: "POST" });
            if (response.ok) {
                location.reload();
            } else {
                alert("Failed to delete column.");
            }
        }
        function loadProject(projectId) {
            window.location.href = `/Home/Index?projectId=${projectId}`;
        }
        function allowDrop(event) {
            event.preventDefault();
        }
        function drag(event) {
            event.dataTransfer.setData("dragType", "ticket");
            event.dataTransfer.setData("ticketId", event.target.id);
        }
        async function drop(event) {
            event.preventDefault();
            let dragType = event.dataTransfer.getData("dragType");
            if (dragType !== "ticket") return;
            let ticketId = event.dataTransfer.getData("ticketId").replace("ticket-", "");
            let columnElement = event.target.closest(".kanban-column");
            if (!columnElement) return;
            let columnId = columnElement.getAttribute("data-column-id");
            let response = await fetch(`/Home/MoveTicket?ticketId=${ticketId}&columnId=${columnId}`, {
                method: "POST"
            });
            if (response.ok) {
                let dropArea = columnElement.querySelector(".kanban-cards");
                dropArea.appendChild(document.getElementById(`ticket-${ticketId}`));
                let placeholder = dropArea.querySelector(".drop-placeholder");
                if (placeholder) {
                    placeholder.remove();
                }
            } else {
                console.error("Failed to move ticket");
            }
        }
        function dragColumn(event) {
            if (!@ViewBag.CanManageColumns.ToString().ToLower()) {
                event.preventDefault();
                return;
            }
            event.dataTransfer.setData("dragType", "column");
            event.dataTransfer.setData("columnId", event.target.closest(".kanban-column").getAttribute("data-column-id"));
        }
        async function dropColumn(event) {
            event.preventDefault();
            if (!@ViewBag.CanManageColumns.ToString().ToLower()) {
                return;
            }
            let dragType = event.dataTransfer.getData("dragType");
            if (dragType !== "column") return;
            let draggedColumnId = event.dataTransfer.getData("columnId");
            let targetColumn = event.target.closest(".kanban-column");
            if (!targetColumn) return;
            let targetColumnId = targetColumn.getAttribute("data-column-id");
            let response = await fetch(`/Home/SwapColumns?draggedColumnId=${draggedColumnId}&targetColumnId=${targetColumnId}`, {
                method: "POST"
            });
            if (response.ok) {
                location.reload();
            }
        }
        function openTicketModal() {
            document.getElementById("ticketModal").style.display = "flex";
        }
        function closeTicketModal() {
            document.getElementById("ticketModal").style.display = "none";
        }
        async function submitTicket() {
            let projectId = document.getElementById("projectId").value;
            let title = document.getElementById("ticketTitle").value.trim();
            let description = document.getElementById("ticketDescription").value.trim();
            let errorDiv = document.getElementById("addTicketError");
            errorDiv.style.display = "none";
            errorDiv.innerText = "";
            if (!title || !description) {
                errorDiv.innerText = "Title and description are required.";
                errorDiv.style.display = "block";
                return;
            }
            let response = await fetch("/Home/AddTicket", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ projectId, title, description })
            });
            if (response.ok) {
                location.reload();
            } else {
                let result = await response.json();
                errorDiv.innerText = result.error || "Failed to add ticket.";
                errorDiv.style.display = "block";
            }
        }
        async function viewTicketDetails(ticketId) {
            let response = await fetch(`/Home/ViewTicketDetails?ticketId=${ticketId}`);
            let data = await response.json();
            if (data.success) {
                document.getElementById("ticketViewTitle").innerText = data.ticket.title;
                document.getElementById("ticketViewDescription").innerText = data.ticket.description;
                document.getElementById("ticketViewStatus").innerText = data.ticket.status;
                document.getElementById("ticketViewCreatedAt").innerText = data.ticket.createdAt;
                document.getElementById("ticketViewAssignedTo").innerText = data.ticket.assignedTo || "Unassigned";
                let historyList = document.getElementById("ticketViewHistory");
                historyList.innerHTML = "";
                data.ticket.history?.forEach(h => {
                    let li = document.createElement("li");
                    li.innerText = `[${h.timestamp}] ${h.performedBy} - ${h.action}`;
                    historyList.appendChild(li);
                });
                let commentsDiv = document.getElementById("ticketComments");
                commentsDiv.innerText = "";
                data.ticket.comments?.forEach(c => {
                    let line = document.createElement("div");
                    line.innerText = `${c.author} - "${c.text}"`;
                    commentsDiv.appendChild(line);
                });
                commentsDiv.setAttribute("data-ticket-id", ticketId);

                document.getElementById("viewTicketModal").style.display = "flex";
            } else {
                alert("Failed to fetch ticket details.");
            }
        }
        async function submitComment() {
            let commentsDiv = document.getElementById("ticketComments");
            let ticketId = commentsDiv.getAttribute("data-ticket-id");
            let commentText = document.getElementById("newComment").value.trim();
            if (!commentText) {
                alert("Comment cannot be empty.");
                return;
            }
            let response = await fetch(`/Home/AddTicketComment`, {
                method: "POST",
                headers: { "Content-Type": "application/x-www-form-urlencoded" },
                body: `ticketId=${ticketId}&commentText=${encodeURIComponent(commentText)}`
            });
            let result = await response.json();
            if (result.success) {
                viewTicketDetails(ticketId);
                document.getElementById("newComment").value = "";
            } else {
                alert("Failed to add comment.");
            }
        }
        function closeViewTicketModal() {
            document.getElementById("viewTicketModal").style.display = "none";
        }
        async function editTicket(ticketId) {
            let response = await fetch(`/Home/ViewTicketDetails?ticketId=${ticketId}`);
            let data = await response.json();
            if (data.success) {
                const ticket = data.ticket;
                document.getElementById("editTicketId").value = ticketId;
                document.getElementById("editTicketTitle").value = ticket.title;
                document.getElementById("editTicketDescription").value = ticket.description;
                const employeeRes = await fetch(`/Home/GetAssignableEmployeesForTicket?ticketId=${ticketId}`);
                const employees = await employeeRes.json();
                const dropdown = document.getElementById("editAssignedTo");
                dropdown.innerHTML = `<option value="">Unassigned</option>`;
                employees.forEach(emp => {
                    const option = document.createElement("option");
                    option.value = emp.id;
                    option.text = emp.name;
                    if (emp.id === ticket.assignedToId) option.selected = true;
                    dropdown.appendChild(option);
                });
                document.getElementById("editTicketModal").style.display = "flex";
            } else {
                alert("Failed to fetch ticket details.");
            }
        }
        function closeEditTicketModal() {
            document.getElementById("editTicketModal").style.display = "none";
        }
        async function submitEditTicket() {
            let ticketId = document.getElementById("editTicketId").value;
            let newTitle = document.getElementById("editTicketTitle").value.trim();
            let newDescription = document.getElementById("editTicketDescription").value.trim();
            let assignedToId = document.getElementById("editAssignedTo").value;
            let errorDiv = document.getElementById("editTicketError");
            errorDiv.style.display = "none";
            errorDiv.innerText = "";
            if (!newTitle || !newDescription) {
                errorDiv.innerText = "Title and description cannot be empty.";
                errorDiv.style.display = "block";
                return;
            }
            let response = await fetch(`/Home/EditTicket`, {
                method: "POST",
                headers: { "Content-Type": "application/x-www-form-urlencoded" },
                body: `ticketId=${ticketId}&title=${encodeURIComponent(newTitle)}&description=${encodeURIComponent(newDescription)}&assignedToId=${encodeURIComponent(assignedToId)}`
            });

            let result = await response.json();
            if (result.success) {
                location.reload();
            } else {
                errorDiv.innerText = result.error || "Failed to update ticket.";
                errorDiv.style.display = "block";
            }
        }
        function deleteTicket(ticketId) {
            document.getElementById("deleteTicketId").value = ticketId;
            document.getElementById("deleteTicketModal").style.display = "flex";
        }
        function closeDeleteTicketModal() {
            document.getElementById("deleteTicketModal").style.display = "none";
        }
        async function confirmDeleteTicket() {
            let ticketId = document.getElementById("deleteTicketId").value;
            let errorDiv = document.getElementById("deleteTicketError");
            errorDiv.style.display = "none";
            errorDiv.innerText = "";
            let response = await fetch(`/Home/DeleteTicket`, {
                method: "POST",
                headers: { "Content-Type": "application/x-www-form-urlencoded" },
                body: `ticketId=${ticketId}`
            });
            let result = await response.json();
            if (result.success) {
                location.reload();
            } else {
                errorDiv.innerText = result.error || "Failed to delete ticket.";
                errorDiv.style.display = "block";
            }
        }
    </script>
</body>
</html>
