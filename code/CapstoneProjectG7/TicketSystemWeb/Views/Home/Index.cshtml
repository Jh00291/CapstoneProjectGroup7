@using TicketSystemWeb.Models.KanbanBoard
@model TicketSystemWeb.Models.KanbanBoard.KanbanBoard

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kanban Board</title>
    <link rel="stylesheet" href="~/css/kanban.css">
</head>
<body>
    <div class="kanban-container">
        <div class="project-list">
            @foreach (var project in ViewBag.UserProjects)
            {
                <div class="project-card @(Model.ProjectId == project.Id ? "active" : "")"
                     onclick="loadProject(@project.Id)">
                    <h4>@project.Title</h4>
                    <p>@(project.Description.Length > 20 ? project.Description.Substring(0, 20) + "..." : project.Description)</p>
                </div>
            }
        </div>

        <div class="kanban-content">
            @if (Model == null || Model.Columns.Count == 0)
            {
                <h2 class="no-projects-message">No Available Projects</h2>
            }
            else
            {
                <div class="kanban-board-header">
                    <h1 class="kanban-title">@Model.ProjectName - Kanban Board</h1>
                    @if (ViewBag.CanManageColumns != null && ViewBag.CanManageColumns)
                    {
                        <button class="btn-add-column" onclick="openColumnModal()">Manage Columns</button>
                    }
                </div>
                <div class="kanban-board-wrapper">
                    <div class="kanban-board">
                        @foreach (var column in Model.Columns.OrderBy(c => c.Order))
                        {
                            <div class="kanban-column" data-column-id="@column.Id"
                                 ondrop="@(ViewBag.CanManageColumns ? "dropColumn(event)" : "")"
                                 ondragover="@(ViewBag.CanManageColumns ? "allowDrop(event)" : "")">
                                <div class="column-header"
                                     draggable="@(ViewBag.CanManageColumns ? "true" : "false")"
                                     ondragstart="@(ViewBag.CanManageColumns ? "dragColumn(event)" : "")">
                                    <h3>@column.Name</h3>
                                </div>
                                <div class="kanban-cards">
                                    @if (!Model.Project?.Tickets?.Any(t => t.Status == column.Name) ?? true)
                                    {
                                        <div class="drop-placeholder"></div>
                                    }
                                    @foreach (var ticket in Model.Project?.Tickets?.Where(t => t.Status == column.Name) ?? Enumerable.Empty<Ticket>())
                                    {
                                        <div class="kanban-card" draggable="true" ondragstart="drag(event)" id="ticket-@ticket.TicketId">
                                            <div class="card-header">
                                                <strong>@ticket.Title</strong>
                                            </div>
                                            <div class="card-body">
                                                <p>@ticket.Description</p>
                                            </div>
                                            <div class="card-footer">
                                                <span class="status">@ticket.Status</span>
                                                <span class="date">@ticket.CreatedAt.ToShortDateString()</span>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>

    <div id="columnModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeColumnModal()">&times;</span>
            <h2>Manage Columns</h2>
            <div class="column-actions">
                <div class="column-action">
                    <h3>Add Column</h3>
                    <input type="text" id="newColumnName" placeholder="Enter new column name">
                </div>
                <div class="column-action">
                    <h3>Edit Column</h3>
                    <select id="editColumnSelect">
                        <option value="">-- Select a Column --</option>
                        @foreach (var column in Model.Columns)
                        {
                            <option value="@column.Id">@column.Name</option>
                        }
                    </select>
                    <input type="text" id="editColumnName" placeholder="Enter new column name">
                </div>
                <div class="column-action">
                    <h3>Delete Column</h3>
                    <select id="deleteColumnSelect">
                        <option value="">-- Select a Column --</option>
                        @foreach (var column in Model.Columns)
                        {
                            <option value="@column.Id">@column.Name</option>
                        }
                    </select>
                </div>
            </div>
            <div class="modal-buttons">
                <button class="btn-purple" onclick="addColumn()">Add</button>
                <button class="btn-purple" onclick="saveColumnChanges()">Save</button>
                <button class="btn-red" onclick="deleteColumn()">Delete</button>
            </div>
        </div>
    </div>

    <script>
        function openColumnModal() {
            document.getElementById("columnModal").style.display = "block";
        }
        function closeColumnModal() {
            document.getElementById("columnModal").style.display = "none";
        }
        async function addColumn() {
            let columnName = document.getElementById("newColumnName").value.trim();
            if (!columnName) {
                alert("Please enter a column name.");
                return;
            }
            let response = await fetch(`/Home/AddColumn?projectId=@Model.ProjectId&name=${columnName}`, { method: "POST" });
            if (response.ok) {
                location.reload();
            } else {
                alert("Failed to add column.");
            }
        }
        async function saveColumnChanges() {
            let columnId = document.getElementById("editColumnSelect").value;
            let columnName = document.getElementById("editColumnName").value.trim();
            if (!columnId || !columnName) {
                alert("Please select a column and enter a new name.");
                return;
            }
            let response = await fetch(`/Home/RenameColumn?columnId=${columnId}&newName=${columnName}`, { method: "POST" });
            if (response.ok) {
                location.reload();
            } else {
                alert("Failed to rename column.");
            }
        }
        async function deleteColumn() {
            let columnId = document.getElementById("deleteColumnSelect").value;
            if (!columnId) {
                alert("Please select a column to delete.");
                return;
            }
            let confirmDelete = confirm("Are you sure you want to delete this column? Tickets in this column will be moved to the first column.");
            if (!confirmDelete) return;
            let response = await fetch(`/Home/DeleteColumn?columnId=${columnId}`, { method: "POST" });
            if (response.ok) {
                location.reload();
            } else {
                alert("Failed to delete column.");
            }
        }
        function loadProject(projectId) {
            window.location.href = `/Home/Index?projectId=${projectId}`;
        }
        function allowDrop(event) {
            event.preventDefault();
        }
        function drag(event) {
            event.dataTransfer.setData("dragType", "ticket");
            event.dataTransfer.setData("ticketId", event.target.id);
        }
        async function drop(event) {
            event.preventDefault();
            let dragType = event.dataTransfer.getData("dragType");
            if (dragType !== "ticket") return;
            let ticketId = event.dataTransfer.getData("ticketId").replace("ticket-", "");
            let columnElement = event.target.closest(".kanban-column");
            if (!columnElement) return;
            let columnId = columnElement.getAttribute("data-column-id");
            let response = await fetch(`/Home/MoveTicket?ticketId=${ticketId}&columnId=${columnId}`, {
                method: "POST"
            });
            if (response.ok) {
                let dropArea = columnElement.querySelector(".kanban-cards");
                dropArea.appendChild(document.getElementById(`ticket-${ticketId}`));
                let placeholder = dropArea.querySelector(".drop-placeholder");
                if (placeholder) {
                    placeholder.remove();
                }
            } else {
                console.error("Failed to move ticket");
            }
        }
        function dragColumn(event) {
            if (!@ViewBag.CanManageColumns.ToString().ToLower()) {
                event.preventDefault();
                return;
            }
            event.dataTransfer.setData("dragType", "column");
            event.dataTransfer.setData("columnId", event.target.closest(".kanban-column").getAttribute("data-column-id"));
        }
        async function dropColumn(event) {
            event.preventDefault();
            if (!@ViewBag.CanManageColumns.ToString().ToLower()) {
                return;
            }
            let dragType = event.dataTransfer.getData("dragType");
            if (dragType !== "column") return;
            let draggedColumnId = event.dataTransfer.getData("columnId");
            let targetColumnId = event.target.closest(".kanban-column").getAttribute("data-column-id");
            let response = await fetch(`/Home/SwapColumns?draggedColumnId=${draggedColumnId}&targetColumnId=${targetColumnId}`, { method: "POST" });
            if (response.ok) {
                location.reload();
            }
        }
    </script>
</body>
</html>
